#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * SonarQube —Å–∫–∞–Ω–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π .env —Ñ–∞–π–ª–æ–≤
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç sonar-scanner
 */

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
function loadEnv() {
  const envPath = path.join(process.cwd(), '.env');

  if (!fs.existsSync(envPath)) {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:');
    console.log('   SONAR_TOKEN=your_token');
    console.log('   SONAR_HOST_URL=http://localhost:9000');
    console.log('   SONAR_PROJECT_KEY=your_project_key');
    process.exit(1);
  }

  const envContent = fs.readFileSync(envPath, 'utf8');
  const envVars = {};

  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        envVars[key.trim()] = valueParts.join('=').trim();
      }
    }
  });

  return envVars;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è coverage/lcov.info
function checkCoverage() {
  const coveragePath = path.join(process.cwd(), 'coverage', 'lcov.info');

  if (!fs.existsSync(coveragePath)) {
    console.warn('‚ö†Ô∏è  –§–∞–π–ª coverage/lcov.info –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pnpm run coverage:generate');
    return false;
  }

  const stats = fs.statSync(coveragePath);
  console.log(`üìÅ –§–∞–π–ª –ø–æ–∫—Ä—ã—Ç–∏—è: ${(stats.size / 1024).toFixed(1)} KB`);
  return true;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SonarQube...');

  const env = loadEnv();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const required = ['SONAR_TOKEN', 'SONAR_HOST_URL'];
  const missing = required.filter(key => !env[key]);

  if (missing.length > 0) {
    console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env: ${missing.join(', ')}`);
    process.exit(1);
  }

  console.log(`üéØ –ü—Ä–æ–µ–∫—Ç: ${env.SONAR_PROJECT_KEY || '–∏–∑ sonar-project.properties'}`);
  console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${env.SONAR_HOST_URL}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
  checkCoverage();

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã sonar-scanner
  // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ—Ä—ë—Ç—Å—è –∏–∑ sonar-project.properties
  const sonarCmd = [
    'sonar-scanner',
    `-Dsonar.host.url=${env.SONAR_HOST_URL}`,
    `-Dsonar.token=${env.SONAR_TOKEN}`
  ].join(' ');

  console.log('üöÄ –ó–∞–ø—É—Å–∫ SonarQube –∞–Ω–∞–ª–∏–∑–∞...');
  console.log(`üìù –ö–æ–º–∞–Ω–¥–∞: ${sonarCmd.replace(env.SONAR_TOKEN, '***')}`);

  try {
    execSync(sonarCmd, {
      stdio: 'inherit',
      env: { ...process.env, ...env }
    });

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ SonarQube –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
    const projectKey = env.SONAR_PROJECT_KEY || 'angular-auto-import'; // fallback –∏–∑ sonar-project.properties
    console.log(`üîó –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${env.SONAR_HOST_URL}/dashboard?id=${projectKey}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SonarQube –∞–Ω–∞–ª–∏–∑–∞:');
    console.error(error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { loadEnv, checkCoverage };
